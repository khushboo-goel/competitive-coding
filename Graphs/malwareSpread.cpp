// https://leetcode.com/problems/minimize-malware-spread-ii/description/
int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    int n = graph.size();
    int minSize = INT_MAX;
    int val = n + 1;

    map<int, bool> isInfected;
    for (int i = 0; i < initial.size(); i++) {
        isInfected[initial[i]] = true;
    }

    for (int i = 0; i < initial.size(); i++) {
        int removeNode = initial[i];
        vector<vector<int>> updatedGraph(graph);

        for (int j = 0; j < n; j++){
            updatedGraph[j][removeNode] = 0;
            updatedGraph[removeNode][j] = 0;
        }

        vector<int> visited(n, 0);
        queue<int> temp;
        int totalInfectedNode = 0;
        for (int j = 0; j < n; j++) {
            int count = 0;
            bool isInfectedFound = false;
            if (visited[j] == 0) {
                temp.push(j);
                visited[j] = 1;
                while(temp.size() > 0) {
                    int node = temp.front();
                    temp.pop();
                    if (isInfected.find(node) != isInfected.end()) {
                        isInfectedFound = true;
                    }
                    count ++;
                    for (int k = 0; k < n; k++) {
                        if (updatedGraph[node][k] == 1 && visited[k] == 0) {
                            temp.push(k);
                            visited[k] = 1;
                        }
                    }
                }

                if (isInfectedFound) {
                    totalInfectedNode += count;
                }
            }
        }
        if (totalInfectedNode < minSize || (totalInfectedNode == minSize && removeNode < val)) {
            minSize = totalInfectedNode;
            val = removeNode;
        }
    }


    return val;
}
